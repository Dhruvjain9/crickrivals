# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'crickrivals_second.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector
from mysql.connector import Error
from datetime import datetime

class Ui_Dashboard(object):
    def __init__(self,logged_in_username=None):
        self.logged_in_username = logged_in_username

        self.mydb = mysql.connector.connect(
                host='localhost',
                user='root',
                password='TIGER',
                database='ipl_fantasy'
            )
        self.connection = self.mydb

    def setupUi(self, Form):
        self.team_images = {
            "Punjab Kings (PBKS)": "images/pbks.jpg",
            "Chennai Super Kings (CSK)": "images/CSK.jpg",
            "Delhi Capitals (DC)": "images/DC.jpg",
            "Gujarat Titans (GT)": "images/GT.jpg",
            "Royal Challengers Bengaluru (RCB)": "images/rcb.jpg",
            "Kolkata Knight Riders (KKR)": "images/kkr.jpg",
            "Mumbai Indians (MI)": "images/mi.jpg",
            "Rajasthan Royals (RR)": "images/rr.jpg",
            "Lucknow Super Giants (LSG)": "images/lsg.jpg",
            "Sunrisers Hyderabad (SRH)": "images/srh.jpg",
        }
        Form.setObjectName("Form")
        Form.resize(861, 568)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:/Users/DHRUV JAIN/Downloads/ChatGPT Image Jun 6, 2025, 12_42_43 PM.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 250, 821, 261))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.listWidget_2 = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.listWidget_2.setObjectName("listWidget_2")
        self.horizontalLayout.addWidget(self.listWidget_2)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(69, 23))
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setMinimumSize(QtCore.QSize(69, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.horizontalLayout.addLayout(self.verticalLayout)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.listWidget = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.listWidget.setObjectName("listWidget")
        self.horizontalLayout.addWidget(self.listWidget)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(20, 200, 821, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setMinimumSize(QtCore.QSize(26, 39))
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        self.lcdNumber_3 = QtWidgets.QLCDNumber(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_3.sizePolicy().hasHeightForWidth())
        self.lcdNumber_3.setSizePolicy(sizePolicy)
        self.lcdNumber_3.setMinimumSize(QtCore.QSize(30, 30))
        self.lcdNumber_3.setDigitCount(1)
        self.lcdNumber_3.setObjectName("lcdNumber_3")
        self.horizontalLayout_2.addWidget(self.lcdNumber_3)
        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_7.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_2.addWidget(self.label_7)
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_2.sizePolicy().hasHeightForWidth())
        self.lcdNumber_2.setSizePolicy(sizePolicy)
        self.lcdNumber_2.setMinimumSize(QtCore.QSize(30, 30))
        self.lcdNumber_2.setDigitCount(1)
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.horizontalLayout_2.addWidget(self.lcdNumber_2)
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        self.lcdNumber_4 = QtWidgets.QLCDNumber(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_4.sizePolicy().hasHeightForWidth())
        self.lcdNumber_4.setSizePolicy(sizePolicy)
        self.lcdNumber_4.setMinimumSize(QtCore.QSize(30, 30))
        self.lcdNumber_4.setDigitCount(1)
        self.lcdNumber_4.setObjectName("lcdNumber_4")
        self.horizontalLayout_2.addWidget(self.lcdNumber_4)
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        self.lcdNumber_5 = QtWidgets.QLCDNumber(self.horizontalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_5.sizePolicy().hasHeightForWidth())
        self.lcdNumber_5.setSizePolicy(sizePolicy)
        self.lcdNumber_5.setMinimumSize(QtCore.QSize(30, 30))
        self.lcdNumber_5.setDigitCount(1)
        self.lcdNumber_5.setObjectName("lcdNumber_5")
        self.horizontalLayout_2.addWidget(self.lcdNumber_5)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(680, 70, 91, 111))
        self.label_2.setText("")
        #self.label_2.setPixmap(QtGui.QPixmap("C:/Users/DHRUV JAIN/Downloads/rcb.jpg"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(60, 30, 131, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(80, 70, 91, 111))
        self.label.setText("")
        #self.label.setPixmap(QtGui.QPixmap("C:/Users/DHRUV JAIN/Downloads/pbks 2.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.comboBox_2 = QtWidgets.QComboBox(Form)
        self.comboBox_2.setGeometry(QtCore.QRect(660, 30, 131, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(410, 120, 61, 41))
        self.label_3.setStyleSheet("font: 75 14pt \"Times New Roman\";")
        self.label_3.setObjectName("label_3")

        self.pushButton.clicked.connect(self.move_to_playing11)
        self.pushButton_2.clicked.connect(self.move_back_to_available)
        self.pushButton_4.clicked.connect(self.validate_playing11)
        self.pushButton_3.clicked.connect(self.submit_playing11)


        self.comboBox.currentIndexChanged.connect(self.update_combined_players)
        self.comboBox_2.currentIndexChanged.connect(self.update_combined_players)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "CrickRivals"))
        self.pushButton_4.setText(_translate("Form", "Validate"))
        self.pushButton.setText(_translate("Form", ">"))
        self.pushButton_2.setText(_translate("Form", "<"))
        self.pushButton_3.setText(_translate("Form", "Submit"))
        self.label_5.setText(_translate("Form", "WK"))
        self.label_7.setText(_translate("Form", "BAT"))
        self.label_6.setText(_translate("Form", "AR"))
        self.label_4.setText(_translate("Form", "BOWL"))
        self.comboBox.setItemText(0, _translate("Form", "<SELECT TEAM>"))
        self.comboBox.setItemText(1, _translate("Form", "Punjab Kings (PBKS)"))
        self.comboBox.setItemText(2, _translate("Form", "Chennai Super Kings (CSK)"))
        self.comboBox.setItemText(3, _translate("Form", "Delhi Capitals (DC)"))
        self.comboBox.setItemText(4, _translate("Form", "Gujarat Titans (GT)"))
        self.comboBox.setItemText(5, _translate("Form", "Royal Challengers Bengaluru (RCB)"))
        self.comboBox.setItemText(6, _translate("Form", "Kolkata Knight Riders (KKR)"))
        self.comboBox.setItemText(7, _translate("Form", "Mumbai Indians (MI)"))
        self.comboBox.setItemText(8, _translate("Form", "Rajasthan Royals (RR)"))
        self.comboBox.setItemText(9, _translate("Form", "Lucknow Super Giants (LSG)"))
        self.comboBox.setItemText(10, _translate("Form", "Sunrisers Hyderabad (SRH)"))
        self.comboBox_2.setItemText(0, _translate("Form", "<SELECT TEAM>"))
        self.comboBox_2.setItemText(1, _translate("Form", "Punjab Kings (PBKS)"))
        self.comboBox_2.setItemText(2, _translate("Form", "Chennai Super Kings (CSK)"))
        self.comboBox_2.setItemText(3, _translate("Form", "Delhi Capitals (DC)"))
        self.comboBox_2.setItemText(4, _translate("Form", "Gujarat Titans (GT)"))
        self.comboBox_2.setItemText(5, _translate("Form", "Royal Challengers Bengaluru (RCB)"))
        self.comboBox_2.setItemText(6, _translate("Form", "Kolkata Knight Riders (KKR)"))
        self.comboBox_2.setItemText(7, _translate("Form", "Mumbai Indians (MI)"))
        self.comboBox_2.setItemText(8, _translate("Form", "Rajasthan Royals (RR)"))
        self.comboBox_2.setItemText(9, _translate("Form", "Lucknow Super Giants (LSG)"))
        self.comboBox_2.setItemText(10, _translate("Form", "Sunrisers Hyderabad (SRH)"))
        self.comboBox.currentIndexChanged.connect(self.update_team1_image)
        self.comboBox_2.currentIndexChanged.connect(self.update_team2_image)

        self.label_3.setText(_translate("Form", "VS"))

    def update_team1_image(self):
        team1 = self.comboBox.currentText()
        team2 = self.comboBox_2.currentText()

        if team1 == team2 and team1 != "<SELECT TEAM>":
            QtWidgets.QMessageBox.warning(None, "Invalid Selection", "Both teams cannot be the same!")
            self.comboBox.setCurrentIndex(0)
            self.listWidget_2.clear()
            return

        if team1 in self.team_images:
            self.label.setPixmap(QtGui.QPixmap(self.team_images[team1]))
        else:
            self.label.clear()

        self.update_combined_players()


    def update_team2_image(self):
        team1 = self.comboBox.currentText()
        team2 = self.comboBox_2.currentText()

        if team1 == team2 and team2 != "<SELECT TEAM>":
            QtWidgets.QMessageBox.warning(None, "Invalid Selection", "Both teams cannot be the same!")
            self.comboBox_2.setCurrentIndex(0)
            self.listWidget.clear()
            return

        if team2 in self.team_images:
            self.label_2.setPixmap(QtGui.QPixmap(self.team_images[team2]))
        else:
            self.label_2.clear()

        self.update_combined_players()

    def update_combined_players(self):
        team1 = self.comboBox.currentText()
        team2 = self.comboBox_2.currentText()

        # Prevent action if either team not selected or same teams chosen
        if team1 == "Select Team" or team2 == "Select Team":
            return
        if team1 == team2:
            QMessageBox.warning(None, "Error", "Both teams cannot be the same.")
            return
        if team1 == "<SELECT TEAM>" or team2 == "<SELECT TEAM>":
            #QMessageBox.warning(self, "Error", "Please select valid teams.")
            return
        # Clear the listWidget before updating
        self.listWidget.clear()
        print("Updating combined players for teams:", team1, team2)
        # Defensive: Check if teams are valid  

        # Get players for both teams
        players_team1 = self.get_players_for_team(team1)
        players_team2 = self.get_players_for_team(team2)
        print("Players in Team 1:", players_team1)
        print("Players in Team 2:", players_team2)
        # Combine all players
        #print(players_team1.extend(players_team2))
        combined_players = players_team1 + players_team2
        # Remove duplicates
        combined_players = list(set(combined_players))
        # Sort players alphabetically    
        combined_players.sort()
        # Clear the right listWidget before adding new items
        self.listWidget_2.clear()    

        # Add to left listWidget only
        for player in combined_players:
            self.listWidget_2.addItem(player)


    def get_players_for_team(self, team_name):
        if not team_name or team_name == "Select Team":
            print(team_name)
            return []
        try:
            
            if self.connection.is_connected():
                cursor = self.connection.cursor()
                query = "SELECT player_name, role FROM players WHERE team = %s"
                cursor.execute(query, (team_name,))
                players = cursor.fetchall()
                cursor.close()
                #self.connection.close()
                # Format each player as "name(role)"
                return [f"{player[0]}({player[1]})" for player in players]
        except Error as e:
            print("Error while connecting to MySQL", e)
            return []
    def move_to_playing11(self):
        selected_item = self.listWidget_2.currentItem()
        if selected_item:
            player = selected_item.text()
            if self.listWidget.count() < 11 and not self.is_already_selected(player):
                self.listWidget.addItem(player)
                self.listWidget_2.takeItem(self.listWidget_2.row(selected_item))
            else:
                QMessageBox.warning(None, "Limit Reached", "Max 11 unique players allowed.")
    def is_already_selected(self, player):
        for i in range(self.listWidget.count()):
            if self.listWidget.item(i).text() == player:
                return True
        return False
    def move_back_to_available(self):
        selected_item = self.listWidget.currentItem()
        if selected_item:
            player = selected_item.text()
            self.listWidget_2.addItem(player)
            self.listWidget.takeItem(self.listWidget.row(selected_item))
    def validate_playing11(self):
        if self.listWidget.count() == 11:
            QMessageBox.information(None, "Valid", "Perfect! 11 players selected.")
        else:
            QMessageBox.warning(None, "Invalid", f"Only {self.listWidget.count()} players selected. Please select exactly 11.")


    def submit_playing11(self):
        if self.listWidget.count() != 11:
            QMessageBox.warning(None, "Invalid Submission", "You must have exactly 11 players.")
            return

        team1 = self.comboBox.currentText()
        team2 = self.comboBox_2.currentText()
        match_name = f"{team1} vs {team2}"
        username = self.logged_in_username  # make sure this is set at login
        timestamp = datetime.now()

        # Get all 11 players
        playing11 = [self.listWidget.item(i).text() for i in range(self.listWidget.count())]

        try:
            cursor = self.mydb.cursor()
            cursor.execute(
                "INSERT INTO playing11 (`match`, username, submitted_at, players) VALUES (%s, %s, %s, %s)",
                (match_name, self.logged_in_username, timestamp, str(playing11))
            )
            self.mydb.commit()
            cursor.close()

            QMessageBox.information(None, "Success", "Playing XI submitted successfully!")

        except Error as e:
            QMessageBox.critical(None, "DB Error", f"Error while saving: {str(e)}")
        self.reset_dashboard()
    def reset_dashboard(self):
        from main import DashboardWindow  # avoid circular import earlier

        username = self.logged_in_username
        self.new_window = DashboardWindow(username)
        self.new_window.show()

        if hasattr(self, 'main_window'):
            self.main_window.close()
        else:
            print("main_window not set!")
     
    def set_main_window(self, main_window):
        self.main_window = main_window  # reference to DashboardWindow
        self.logged_in_username = None  # will be set from main_window
        

    """    def update_team1_players(self):
        team1 = self.comboBox.currentText()
        cursor = self.mydb.cursor()
        cursor.execute("SELECT player_name FROM players WHERE team = %s", (team1,))
        result = cursor.fetchall()

        for row in result:
            player = row[0]
            if not self.is_player_already_listed(player):
                self.listWidget.addItem(f"{player}")

    def update_team2_players(self):
        team2 = self.comboBox_2.currentText()
        cursor = self.mydb.cursor()
        cursor.execute("SELECT player_name FROM players WHERE team = %s", (team2,))
        result = cursor.fetchall()

        for row in result:
            player = row[0]
            if not self.is_player_already_listed(player):
                self.listWidget.addItem(f"{player}")

    def is_player_already_listed(self, player_name):
        for i in range(self.listWidget.count()):
            if self.listWidget.item(i).text() == player_name:
                return True
        return False"""

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Dashboard()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
