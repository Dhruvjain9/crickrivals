# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'create-team.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QListWidgetItem
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QMessageBox
from saveDashboard import Ui_saveDashboard
import sqlite3


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1720, 910)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(20, 20, 1691, 821))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(53, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.comboBox_2 = QtWidgets.QComboBox(self.gridLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("<SELECT TEAM>")
        self.comboBox_2.addItem("Chennai Super Kings (CSK)")
        self.comboBox_2.addItem("Sunrisers Hyderabad (SRH)")
        self.comboBox_2.addItem("Royal Challengers Bengaluru (RCB)")
        self.comboBox_2.addItem("Punjab Kings (PBKS)")
        self.comboBox_2.addItem("Mumbai Indians (MI)")
        self.comboBox_2.addItem("Delhi Capitals (DC)")
        self.comboBox_2.addItem("Gujarat Titans (GT)")
        self.comboBox_2.addItem("Lucknow Super Giants (LSG)")
        self.comboBox_2.addItem("Rajasthan Royals (RR)")
        self.comboBox_2.addItem("Kolkata Knight Riders (KKR)")
        self.horizontalLayout_2.addWidget(self.comboBox_2)
        spacerItem1 = QtWidgets.QSpacerItem(228, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.comboBox_3 = QtWidgets.QComboBox(self.gridLayoutWidget_2)
        self.comboBox_3.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox_3.setFont(font)
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("<SELECT TEAM>")
        self.comboBox_3.addItem("Royal Challengers Bengaluru (RCB)")
        self.comboBox_3.addItem("Chennai Super Kings (CSK)")
        self.comboBox_3.addItem("Sunrisers Hyderabad (SRH)")
        self.comboBox_3.addItem("Punjab Kings (PBKS)")
        self.comboBox_3.addItem("Mumbai Indians (MI)")
        self.comboBox_3.addItem("Delhi Capitals (DC)")
        self.comboBox_3.addItem("Gujarat Titans (GT)")
        self.comboBox_3.addItem("Lucknow Super Giants (LSG)")
        self.comboBox_3.addItem("Rajasthan Royals (RR)")
        self.comboBox_3.addItem("Kolkata Knight Riders (KKR)")
        self.horizontalLayout_2.addWidget(self.comboBox_3)
        spacerItem2 = QtWidgets.QSpacerItem(51, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 1)
        self.horizontalLayout_2.setStretch(2, 1)
        self.horizontalLayout_2.setStretch(3, 1)
        self.horizontalLayout_2.setStretch(4, 1)
        self.gridLayout.addLayout(self.horizontalLayout_2, 2, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("images/pbks.png"))
        self.label_2.setScaledContents(False)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.label_13 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_3.addWidget(self.label_13)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("images/rcb.png"))
        self.label_3.setScaledContents(False)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.horizontalLayout_3.setStretch(0, 1)
        self.horizontalLayout_3.setStretch(4, 1)
        self.gridLayout.addLayout(self.horizontalLayout_3, 3, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        spacerItem5 = QtWidgets.QSpacerItem(38, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
        self.lineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
        self.horizontalLayout.setStretch(1, 1)
        self.horizontalLayout.setStretch(2, 1)
        self.horizontalLayout.setStretch(3, 1)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem7, 1, 0, 1, 1)
        self.gridLayout.setRowStretch(0, 1)
        self.gridLayout.setRowStretch(2, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_11 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_7.addWidget(self.label_11)
        self.label_14 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_14.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_7.addWidget(self.label_14)
        self.label_10 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_7.addWidget(self.label_10)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_6.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_7.addWidget(self.label_6)
        self.label_9 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_7.addWidget(self.label_9)
        self.label_8 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_8.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_7.addWidget(self.label_8)
        self.label_7 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_7.addWidget(self.label_7)
        self.label_12 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_12.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_7.addWidget(self.label_12)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem8 = QtWidgets.QSpacerItem(60, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem8)
        self.radioButton_5 = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        self.radioButton_5.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setObjectName("radioButton_5")
        self.horizontalLayout_5.addWidget(self.radioButton_5)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem9)
        self.radioButton_4 = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        self.radioButton_4.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setObjectName("radioButton_4")
        self.horizontalLayout_5.addWidget(self.radioButton_4)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem9)
        self.radioButton_3 = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.horizontalLayout_5.addWidget(self.radioButton_3)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem10)
        self.radioButton_2 = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout_5.addWidget(self.radioButton_2)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem11)
        self.radioButton = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout_5.addWidget(self.radioButton)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem12)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.listWidget_2 = QtWidgets.QListWidget(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.listWidget_2.setFont(font)
        self.listWidget_2.setSortingEnabled(True)  # Enable sorting if needed
        self.listWidget_2.setObjectName("listWidget_2")
        self.horizontalLayout_4.addWidget(self.listWidget_2)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem13)
        self.listWidget = QtWidgets.QListWidget(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        self.horizontalLayout_4.addWidget(self.listWidget)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_4 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_6.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(15, 123, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_5.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_6.addWidget(self.label_5)
        spacerItem14 = QtWidgets.QSpacerItem(300, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem14)
        self.pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_6.addWidget(self.pushButton_2)
        spacerItem15 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem15)
        self.pushButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_6.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(3, 1)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1720, 22))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(233, 233, 233))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(233, 233, 233))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(233, 233, 233))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(233, 233, 233))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.menubar.setPalette(palette)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew_Team = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/new-team.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNew_Team.setIcon(icon1)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.actionSave_Team = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/save--v1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave_Team.setIcon(icon2)
        self.actionSave_Team.setObjectName("actionSave_Team")
        self.actionManage_Team = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/manage-team.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionManage_Team.setIcon(icon3)
        self.actionManage_Team.setObjectName("actionManage_Team")
        self.actionInstructions = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/instructions.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionInstructions.setIcon(icon4)
        self.actionInstructions.setObjectName("actionInstructions")
        self.actionManual = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/manual.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionManual.setIcon(icon5)
        self.actionManual.setObjectName("actionManual")
        self.menuFile.addAction(self.actionNew_Team)
        self.menuFile.addAction(self.actionSave_Team)
        self.menuFile.addAction(self.actionManage_Team)
        self.menuHelp.addAction(self.actionInstructions)
        self.menuHelp.addAction(self.actionManual)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.comboBox_2.currentIndexChanged.connect(self.update_team1)
        self.comboBox_3.currentIndexChanged.connect(self.update_team2)
        self.radioButton_5.clicked.connect(lambda: self.filter_players())
        self.radioButton_3.clicked.connect(lambda: self.filter_players("BAT"))
        self.radioButton.clicked.connect(lambda: self.filter_players("BOWL"))
        self.radioButton_2.clicked.connect(lambda: self.filter_players("AR"))
        self.radioButton_4.clicked.connect(lambda: self.filter_players("WK"))
        self.listWidget_2.itemDoubleClicked.connect(self.add_to_selected)
        self.listWidget.itemDoubleClicked.connect(self.remove_from_selected)
        self.selected_players = []
        self.all_players = []  # This will hold all players from both teams
        self.actionSave_Team.triggered.connect(self.pushButton.click)
        self.pushButton_2.clicked.connect(self.save_draft)
        self.pushButton.clicked.connect(self.open_save_dashboard)
        self.update_role_counters()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Create Team"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "<SELECT TEAM>"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "Royal Challengers Bengaluru (RCB)"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "Chennai Super Kings (CSK)"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "Sunrisers Hyderabad (SRH)"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "Punjab Kings (PBKS)"))
        self.comboBox_2.setItemText(5, _translate("MainWindow", "Mumbai Indians (MI)"))
        self.comboBox_2.setItemText(6, _translate("MainWindow", "Delhi Capitals (DC)"))
        self.comboBox_2.setItemText(7, _translate("MainWindow", "Gujarat Titans (GT)"))
        self.comboBox_2.setItemText(8, _translate("MainWindow", "Lucknow Super Giants (LSG)"))
        self.comboBox_2.setItemText(9, _translate("MainWindow", "Rajasthan Royals (RR)"))
        self.comboBox_2.setItemText(10, _translate("MainWindow", "Kolkata Knight Riders (KKR)"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "<SELECT TEAM>"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "Royal Challengers Bengaluru (RCB)"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "Chennai Super Kings (CSK)"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "Sunrisers Hyderabad (SRH)"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "Punjab Kings (PBKS)"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "Mumbai Indians (MI)"))
        self.comboBox_3.setItemText(6, _translate("MainWindow", "Delhi Capitals (DC)"))
        self.comboBox_3.setItemText(7, _translate("MainWindow", "Gujarat Titans (GT)"))
        self.comboBox_3.setItemText(8, _translate("MainWindow", "Lucknow Super Giants (LSG)"))
        self.comboBox_3.setItemText(9, _translate("MainWindow", "Rajasthan Royals (RR)"))
        self.comboBox_3.setItemText(10, _translate("MainWindow", "Kolkata Knight Riders (KKR)"))
        self.label_13.setText(_translate("MainWindow", "VS"))
        self.label.setText(_translate("MainWindow", "Team name"))
        self.label_11.setText(_translate("MainWindow", "WK"))
        self.label_14.setText(_translate("MainWindow", "##"))
        self.label_10.setText(_translate("MainWindow", "BAT"))
        self.label_6.setText(_translate("MainWindow", "##"))
        self.label_9.setText(_translate("MainWindow", "AR"))
        self.label_8.setText(_translate("MainWindow", "##"))
        self.label_7.setText(_translate("MainWindow", "BOWL"))
        self.label_12.setText(_translate("MainWindow", "##"))
        self.radioButton_5.setText(_translate("MainWindow", "ALL"))
        self.radioButton_5.setChecked(True)
        self.radioButton_4.setText(_translate("MainWindow", "WK"))
        self.radioButton_3.setText(_translate("MainWindow", "BAT"))
        self.radioButton_2.setText(_translate("MainWindow", "AR"))
        self.radioButton.setText(_translate("MainWindow", "BOWL"))
        self.label_4.setText(_translate("MainWindow", "Total credits: "))
        self.label_5.setText(_translate("MainWindow", "##"))
        self.pushButton_2.setText(_translate("MainWindow", "Save Draft"))
        self.pushButton.setText(_translate("MainWindow", "Save Team"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionNew_Team.setText(_translate("MainWindow", "New Team"))
        self.actionNew_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSave_Team.setText(_translate("MainWindow", "Save Team"))
        self.actionSave_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionManage_Team.setText(_translate("MainWindow", "Manage Team"))
        self.actionManage_Team.setShortcut(_translate("MainWindow", "Ctrl+M"))
        self.actionInstructions.setText(_translate("MainWindow", "Instructions"))
        self.actionManual.setText(_translate("MainWindow", "Manual"))

    def update_unselected_list(self, role_filter=None):
        self.listWidget_2.clear()
        if role_filter:
            filtered = [p for p in self.all_players if p[2] == role_filter]
        else:
            filtered = self.all_players

        selected_ids = self.selected_players
        final_list = [p for p in filtered if p[0] not in selected_ids]

        for player in final_list:
            player_id, name, role, points = player
            item = QListWidgetItem(f"{name} | {role} | {points}")
            item.setData(QtCore.Qt.UserRole, player_id)
            self.listWidget_2.addItem(item)


    def update_selected_list(self):
        self.listWidget.clear()
        for player_id in self.selected_players:
            name, role, team, points = self.get_player_details(player_id)
            item = QListWidgetItem(f"{name} | {role} | {points}")
            item.setData(QtCore.Qt.UserRole, player_id)
            self.listWidget.addItem(item)

    def get_player_details(self, player_id):
        try:
            conn = sqlite3.connect("app_database.db")
            cursor = conn.cursor()
            cursor.execute("SELECT playername, role, team, points FROM players WHERE id = ?", (player_id,))
            result = cursor.fetchone()
            conn.close()
            if result:
                playername, role, team_code, points = result
                return playername, role, team_code, points
        except Exception as e:
            print("⚠️ Error in get_player_details:", e)
            return "Unknown", "Unknown", "UNK", 0
    def deselect_player(self, player_id):
        if player_id in self.selected_players:
            self.selected_players.remove(player_id)
        self.update_selected_list()
        self.update_unselected_list(role_filter=getattr(self, 'current_role_filter', None))
        self.update_labels()

    def filter_players(self, role=None):
        self.current_role_filter = role
        self.update_unselected_list(role_filter=role)

    def get_team_code_from_db(self, team_id):
        try:
            conn = sqlite3.connect("app_database.db")
            cursor = conn.cursor()
            cursor.execute("SELECT code FROM teams WHERE id = ?", (team_id,))
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else "UNK"
        except Exception as e:
            print("⚠️ Error fetching team code:", e)
            return "UNK"

    def update_team1(self):
        team2_full = self.comboBox_3.currentText()
        team1_full = self.comboBox_2.currentText()
        if team1_full != "<SELECT TEAM>":
            if team1_full == team2_full and team1_full != "":
                QMessageBox.warning(None, "Team Selection Error", "Both teams cannot be the same!")
                self.comboBox_2.setCurrentIndex(0)
                return
        try:
            conn = sqlite3.connect("app_database.db")
            cursor = conn.cursor()
            cursor.execute("SELECT id, short_code FROM teams WHERE name_with_code = ?", (team1_full,))
            result = cursor.fetchone()
            if not result:
                print("⚠️ Team not found in DB:", team1_full)
                return
            team1_id, team1_code = result
            pixmap1 = QPixmap(f"images/{team1_code}.png")
            self.label_2.setPixmap(pixmap1)
            cursor.execute("SELECT id, playername, role, points FROM players WHERE team = ?", (team1_code,))
            self.players_team1 = cursor.fetchall()
            conn.close()
            self.update_combined_list()
        except Exception as e:
            print("❌ Error in update_team1:", e)

    def update_team2(self):
        team1_full = self.comboBox_2.currentText()
        team2_full = self.comboBox_3.currentText()
        if team1_full != "<SELECT TEAM>":
            if team1_full == team2_full and team1_full != "":
                QMessageBox.warning(None, "Team Selection Error", "Both teams cannot be the same!")
                self.comboBox_3.setCurrentIndex(0)
                return
        try:
            conn = sqlite3.connect("app_database.db")
            cursor = conn.cursor()
            cursor.execute("SELECT id, short_code FROM teams WHERE name_with_code = ?", (team2_full,))
            result = cursor.fetchone()
            if not result:
                print("⚠️ Team not found in DB:", team2_full)
                return
            team2_id, team2_code = result
            pixmap2 = QPixmap(f"images/{team2_code}.png")
            self.label_3.setPixmap(pixmap2)
            cursor.execute("SELECT id, playername, role, points FROM players WHERE team = ?", (team2_code,))
            self.players_team2 = cursor.fetchall()
            conn.close()
            self.update_combined_list()
        except Exception as e:
            print("❌ Error in update_team2:", e)

    def update_combined_list(self):
        combined = []
        if hasattr(self, 'players_team1'):
            combined.extend(self.players_team1)
        if hasattr(self, 'players_team2'):
            combined.extend(self.players_team2)
        self.all_players = combined
        self.listWidget_2.clear()
        for player_id, playername, role, points in combined:
            item = QListWidgetItem(f"{playername} | {role} | {points}")
            item.setData(QtCore.Qt.UserRole, player_id)
            self.listWidget_2.addItem(item)
        print("🔄 Combined player list updated with", len(self.all_players), "players.")

    def update_left_list(self):
        self.listWidget_2.clear()
        role = None
        if self.radioButton_3.isChecked():
            role = "BAT"
        elif self.radioButton.isChecked():
            role = "BOWL"
        elif self.radioButton_2.isChecked():
            role = "AR"
        elif self.radioButton_4.isChecked():
            role = "WK"
        for player in self.all_players:
            player_id, playername, r, pts = player
            if role is None or r == role:
                item = QListWidgetItem(f"{playername} | {r} | {pts}")
                item.setData(QtCore.Qt.UserRole, player_id)
                self.listWidget_2.addItem(item)

    # Remaining methods are similar and involve database operations and UI updates.

    def get_team_name_for_player(self, player_name):
        try:
            conn = sqlite3.connect("app_database.db")
            cursor = conn.cursor()

            # 🔍 First get the team_id for the player
            cursor.execute("SELECT team FROM players WHERE playername = ?", (player_name,))
            result = cursor.fetchone()
            team_result = result[0]

            if team_result:
                return team_result
            else:
                print(f"⚠️ No team found for player {player_name}.")
                return None

        except sqlite3.Error as e:
            print("❌ Database error:", e)
            return None
        finally:
            conn.close()


    def add_to_selected(self, item):
        if len(self.selected_players) >= 11:
            QMessageBox.warning(None, "Limit Reached", "Only 11 players allowed.")
            return

        player_id = item.data(QtCore.Qt.UserRole)  # 🔑 Get the hidden player ID
        data = item.text().split(" | ")
        playername, role, points = data[0], data[1], int(data[2])

        # Duplicate check based on ID (not name anymore)
        if player_id in self.selected_players:
            return

        # Role limits
        role_max = {
            "WK": 4,
            "BAT": 4,
            "AR": 4,
            "BOWL": 4
        }

        # Count roles and total points
        self.role_counts = {"WK": 0, "BAT": 0, "AR": 0, "BOWL": 0}
        total_points = 0
        for pid in self.selected_players:
            name, r, t, pts = self.get_player_details(pid)
            if r in self.role_counts:
                self.role_counts[r] += 1
            total_points += pts

        if self.role_counts[role] >= role_max[role]:
            QMessageBox.warning(None, "Role Limit Reached", f"You can't have more than {role_max[role]} {role}s.")
            return
        if total_points + points > 100:
            QMessageBox.warning(None, "Points Limit Exceeded", "Adding this player will exceed 100 total points.")
            return

        team_name = self.get_team_name_for_player(playername)
        if not team_name:
            QMessageBox.warning(None, "Team Not Found", f"Could not find team for player {playername}.")
            return

        # ✅ Passed all checks – append player_id
        self.selected_players.append(player_id)

        self.update_selected_list()
        self.update_role_counters()
        self.update_unselected_list(role_filter=getattr(self, 'current_role_filter', None))

        self.update_labels()

    def remove_from_selected(self, item):
        player_id = item.data(QtCore.Qt.UserRole)  # 🔑 Retrieve hidden ID

        if player_id in self.selected_players:
            self.selected_players.remove(player_id)

        # Update both sides of the UI
        self.update_selected_list()
        self.update_unselected_list(role_filter=getattr(self, 'current_role_filter', None))
        self.update_role_counters()
        self.update_labels()


    def update_labels(self):
        count = len(self.selected_players)
        points = 0

        for player_id in self.selected_players:
            _, _, _, p_points = self.get_player_details(player_id)
            points += p_points

        # Update total points label
        self.label_5.setText(str(points))

        # Optional: If you're tracking total players too
        # self.label_player_count.setText(f"Players: {count}/11")


    def save_draft(self):
        if not self.selected_players:
            QMessageBox.warning(None, "Empty", "No players selected.")
            return
        if len(self.selected_players) < 11:
            QMessageBox.warning(None, "Incomplete Team", "Please select 11 players before saving.")
            return

        # Count roles using player details
        role_counts = {"WK": 0, "BAT": 0, "AR": 0, "BOWL": 0}
        for pid in self.selected_players:
            _, _, role, _ = self.get_player_details(pid)
            if role in role_counts:
                role_counts[role] += 1

        missing_roles = [role for role, count in role_counts.items() if count == 0]
        if missing_roles:
            QMessageBox.warning(None, "Role Missing", f"Your team must have at least one player for each role. Missing: {', '.join(missing_roles)}")
            return

        user_team_name = self.lineEdit.text().strip()
        if not user_team_name:
            QMessageBox.warning(None, "Missing Team Name", "Please enter your team name.")
            return

        team1 = self.comboBox_2.currentText()
        team2 = self.comboBox_3.currentText()
        match_name = f"{team1} vs {team2}"

        conn = sqlite3.connect("app_database.db")
        cursor = conn.cursor()

        for pid in self.selected_players:
            name, role, team, points = self.get_player_details(pid)
            team_code = self.get_team_code(team)
            cursor.execute('''
                INSERT INTO drafts (team_name, match_name, playername, team, role, points)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user_team_name,
                match_name,
                name,
                team_code,
                role,
                points
            ))

        conn.commit()
        conn.close()

        QMessageBox.information(None, "Saved", "Draft saved successfully!")
        self.close()

        #self.homepage = HomeWindow()
        #self.homepage.show()
    
    def update_role_counters(self):
        role_counts = {"WK": 0, "BAT": 0, "AR": 0, "BOWL": 0}

        for player_id in self.selected_players:
            player_name, role, team_code, points = self.get_player_details(player_id)
            if role in role_counts:
                role_counts[role] += 1

        self.label_14.setText(str(role_counts['WK']))
        self.label_6.setText(str(role_counts['BAT']))
        self.label_8.setText(str(role_counts['AR']))
        self.label_12.setText(str(role_counts['BOWL']))


    def get_team_code(self, name):
        name = name.strip()
        if "(" in name:
            return name[name.find("(")+1:name.find(")")]
        team_map = {
            "Punjab Kings (PBKS)": "PBKS",
            "Royal Challengers Bangalore (RCB)": "RCB",
            "Mumbai Indians (MI)": "MI",
            "Chennai Super Kings (CSK)": "CSK",
            "Delhi Capitals (DC)": "DC",
            "Kolkata Knight Riders (KKR)": "KKR",
            "Lucknow Super Giants (LSG)": "LSG",
            "Sunrisers Hyderabad (SRH)": "SRH",
            "Rajasthan Royals (RR)": "RR",
            "Gujarat Titans (GT)": "GT"
        }
        return team_map.get(name, name)
   
    def open_save_dashboard(self):
        self.save_window = QtWidgets.QMainWindow()
    
        # Collect data to pass
        for role in ["WK", "BAT", "AR", "BOWL"]:
            if not any(player_id for player_id in self.selected_players if self.get_player_details(player_id)[1] == role):
                QMessageBox.warning(None, "Role Missing", f"Your team must have at least one {role} player.")
                return
        team_name = self.lineEdit.text().strip()  # your fantasy team name
        team1 = self.comboBox_2.currentText()
        team2 = self.comboBox_3.currentText()
        team1_code = self.get_team_code(team1)
        team2_code = self.get_team_code(team2)

        # Format: "Player Name | Role | Team"
        players_list = []
        for player_id in self.selected_players:
            name, role, team, _ = self.get_player_details(player_id)
            players_list.append(f"{name} | {role} | {team}")

        if not team_name:
            QMessageBox.warning(None, "Missing Team Name", "Please enter your team name.")
            return
        
        self.ui_save = Ui_saveDashboard(team_name, team1, team2, players_list, team1_code, team2_code, self.username)
        self.save_window.setStyleSheet("""/* Main Window */
QMainWindow {
    background-color: #f4f9ff;  /* smooth off-white-blue */
    font-family: "Segoe UI", sans-serif;
}

/* All Labels */
QLabel {
    font-size: 16px;
    color: #003366;
    font-weight: 500;
}

/* Info/Warning Label */
QLabel#infoLabel {
    color: #d32f2f;  /* warning red */
    font-weight: bold;
}

/* List Widget */
QListWidget {
    background-color: #ffffff;
    border: 2px solid #007acc;
    border-radius: 10px;
    padding: 8px;
    font-size: 15px;
    color: #002244;
}
QListWidget::item {
    padding: 8px;
    margin: 4px;
    border-radius: 6px;
}
QListWidget::item:selected {
    background-color: #d0ecff;
    color: #000;
    font-weight: bold;
}

/* Buttons */
QPushButton {
    background-color: #007acc;
    color: white;
    border-radius: 10px;
    padding: 10px 20px;
    font-size: 15px;
    font-weight: bold;
}
QPushButton:hover {
    background-color: #005f99;
}
QPushButton:pressed {
    background-color: #004466;
}

/* Tooltip (optional but nice for hover help) */
QToolTip {
    background-color: #007acc;
    color: white;
    padding: 6px;
    border: none;
    font-size: 13px;
    border-radius: 5px;
}

""")
        self.ui_save.setupUi(self.save_window)
        self.save_window.show()


    def preset_teams_in_combobox(self, team1, team2):
        # Find index of team1 in comboBox items
        index1 = self.comboBox_2.findText(team1)
        if index1 != -1:
            self.comboBox_2.setCurrentIndex(index1)
        else:
            print(f"Warning: {team1} not found in comboBox items")

        # If you want to set a second combo box for team2:
        index2 = self.comboBox_3.findText(team2)
        if index2 != -1:
            self.comboBox_3.setCurrentIndex(index2)
        else:
            print(f"Warning: {team2} not found in comboBox2 items")
